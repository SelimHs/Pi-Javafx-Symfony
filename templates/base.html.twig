<!DOCTYPE html>
<html lang="en">
{% include 'partials/head.html.twig' %}

<body>
{% include 'partials/header.html.twig' %}

<!-- üåå Particles background -->
<div id="particles-js" style="position: fixed; width: 100%; height: 100%; z-index: -1;"></div>
<style>
  /* üé® Styles du Chatbot */
  #chatbot-toggle {
    position: fixed;
    bottom: 90px;
    right: 20px;
    background: #f35525;
    color: white;
    padding: 16px;
    border-radius: 50%;
    font-size: 24px;
    cursor: pointer;
    z-index: 1050;
    box-shadow: 0 4px 12px rgba(243, 85, 37, 0.3);
    transition: all 0.3s ease;
    border: none;
  }

  #chatbot-toggle:hover {
    transform: scale(1.1);
    background: #ff6b3d;
  }

  #chatbot-box {
    position: fixed;
    bottom: 160px;
    right: 20px;
    width: 360px;
    height: 500px;
    background: white;
    border-radius: 16px;
    display: none;
    flex-direction: column;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
    z-index: 1050;
    overflow: hidden;
  }

  #chat-header {
    background: #f35525;
    color: white;
    padding: 16px;
    font-weight: 600;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  #chat-close {
    cursor: pointer;
    padding: 4px;
    transition: transform 0.2s ease;
  }

  #chat-close:hover {
    transform: scale(1.2);
  }

  #chat-messages {
    flex: 1;
    overflow-y: auto;
    padding: 16px;
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .msg {
    padding: 12px 16px;
    border-radius: 20px;
    max-width: 85%;
    line-height: 1.5;
    font-size: 0.95rem;
    position: relative;
    animation: messageAppear 0.3s ease;
  }

  @keyframes messageAppear {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }

  .msg.user {
    background: #f0f0f0;
    align-self: flex-end;
  }

  .msg.bot {
    background: #eaf6ff;
    align-self: flex-start;
  }

  .msg.typing {
    background: #fff3cd;
    color: #856404;
    width: max-content;
  }

  .timestamp {
    font-size: 0.75rem;
    color: #666;
    margin-top: 4px;
    text-align: right;
  }

  #chat-input-container {
    position: relative;
    border-top: 1px solid #eee;
  }

  #chat-input {
    width: 100%;
    padding: 16px 60px 16px 20px;
    border: none;
    font-size: 1rem;
    box-sizing: border-box;
  }

  #chat-send {
    position: absolute;
    right: 15px;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: #f35525;
    font-size: 1.2rem;
    cursor: pointer;
    padding: 8px;
  }

  /* üåë Mode Sombre */
  body.dark-mode #chatbot-box {
    background: #1e1e2a;
  }

  body.dark-mode #chat-header {
    background: #2c2c3e;
  }

  body.dark-mode .msg.user {
    background: #2c2c3e;
    color: white;
  }

  body.dark-mode .msg.bot {
    background: #3d3d54;
    color: white;
  }

  body.dark-mode #chat-input {
    background: #2c2c3e;
    color: white;
    border-color: #444;
  }

  /* üé® Th√®me g√©n√©ral */
  #theme-toggle {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 9999;
    background: #f35525;
    color: white;
    border: none;
    padding: 12px;
    border-radius: 50%;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .fixed-buttons-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 9999;
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  #login-toggle,
  #profile-toggle {
    width: 44px;
    height: 44px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #3a7bd5;
    color: white;
    text-decoration: none;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    transition: all 0.3s ease;
  }
</style>

<!-- ü§ñ Interface du Chatbot -->
<button id="chatbot-toggle" aria-label="Ouvrir le chatbot">üí¨</button>
<div id="chatbot-box">
  <div id="chat-header">
    <span>ü§ñ Assistant Lamma</span>
    <div id="chat-close" aria-label="Fermer le chatbot">‚úñ</div>
  </div>
  <div id="chat-messages">
    <div class="msg bot">
      üëã Bonjour ! Je suis votre assistant Lamma.
      <div class="timestamp">Juste maintenant</div>
    </div>
  </div>
  <div id="chat-input-container">
    <input type="text" id="chat-input" placeholder="√âcrivez votre message..." aria-label="Entr√©e de message">
    <button id="chat-send" aria-label="Envoyer">‚û§</button>
  </div>
</div>
<!-- üåü Main content -->
<div class="container py-5">
  {% block body %}{% endblock %}
  
  <!-- ‚úâÔ∏è Contact Section -->
  <div id="contact" class="mt-5 text-center">
    <h2>Contact Us</h2>
    <p>If you have any questions, feel free to reach us:</p>
    <p>Email: <a href="mailto:lamma.eventgroups@gmail.com">lamma.eventgroups@gmail.com</a></p>
    <p>Phone: +216 50 135 096</p>
  </div>
</div>

<!-- üåô Theme toggle button -->
<!-- üåô Theme toggle and Login buttons -->
<div class="fixed-buttons-container">
  <button id="theme-toggle" title="Toggle theme" aria-label="Toggle dark mode">üåì</button>
  {% if not app.user %}
    <a href="{{ path('app_login') }}" id="login-toggle" title="Login" aria-label="Login">
      üë§
    </a>
  {% else %}
    <a href="{{ path('app_profile') }}" id="profile-toggle" title="Profile" aria-label="Profile">
      üë§
    </a>
  {% endif %}
</div>

<style>
  /* Add this to your existing styles */
  .fixed-buttons-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 9999;
    display: flex;
    flex-direction: column;
    gap: 10px;
    align-items: flex-end;
  }
  
  #login-toggle,
  #profile-toggle {
    width: 44px;
    height: 44px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    text-decoration: none;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    transition: all 0.3s;
    background: linear-gradient(135deg, #3a7bd5 0%, #00d2ff 100%);
    color: white;
    font-size: 18px;
  }
  
  #profile-toggle {
    background: linear-gradient(135deg, #5f2c82 0%, #49a09d 100%);
  }
  
  #login-toggle:hover,
  #profile-toggle:hover {
    transform: scale(1.1);
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);
  }
</style>
<!-- Scripts -->
<script src="https://cdn.jsdelivr.net/npm/particles.js@2.0.0/particles.min.js"></script>
<script src="{{ asset('assets/jquery/jquery.min.js') }}"></script>
<script src="{{ asset('assets/js/bootstrap.min.js') }}"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script src="{{ asset('assets/js/isotope.min.js') }}"></script>
<script src="{{ asset('assets/js/owl-carousel.js') }}"></script>
<script src="{{ asset('assets/js/counter.js') }}"></script>
<script src="{{ asset('assets/js/custom.js') }}"></script>

<!-- Chatbot, Theme Switch and Particles Scripts -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  const toggleBtn = document.getElementById('chatbot-toggle');
  const chatBox = document.getElementById('chatbot-box');
  const closeBtn = document.getElementById('chat-close');
  const input = document.getElementById('chat-input');
  const sendBtn = document.getElementById('chat-send');
  const messages = document.getElementById('chat-messages');
  
  // Toggle chat box with animation
  toggleBtn.addEventListener('click', () => {
    const isVisible = chatBox.classList.contains('visible');
    
    if (isVisible) {
      chatBox.classList.remove('visible');
      setTimeout(() => {
        chatBox.style.display = 'none';
      }, 300);
    } else {
      chatBox.style.display = 'flex';
      setTimeout(() => {
        chatBox.classList.add('visible');
      }, 10);
    }
    
    toggleBtn.classList.toggle('opened', !isVisible);
    input.focus();
  });
  
  // Close button
  closeBtn.addEventListener('click', () => {
    chatBox.classList.remove('visible');
    setTimeout(() => {
      chatBox.style.display = 'none';
      toggleBtn.classList.remove('opened');
    }, 300);
  });
  
  // Send message function
  function sendMessage() {
    const userMsg = input.value.trim();
    if (!userMsg) return;
    
    // Add timestamp
    const now = new Date();
    const timeString = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    
    // Add user message
    messages.innerHTML += `
      <div class="msg user">
        ${userMsg}
        <div class="timestamp">${timeString}</div>
      </div>
    `;
    input.value = '';
    messages.scrollTop = messages.scrollHeight;
    
    // Add typing indicator
    const typingIndicator = document.createElement('div');
    typingIndicator.className = 'msg typing';
    typingIndicator.innerHTML = `
      <div class="typing-indicator">
        <span></span><span></span><span></span>
      </div>
      Lamma r√©fl√©chit...
    `;
    messages.appendChild(typingIndicator);
    messages.scrollTop = messages.scrollHeight;
    
    // Simulate API call with delay
    setTimeout(() => {
      fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ message: userMsg })
      })
      .then(res => res.json())
      .then(data => {
        typingIndicator.remove();
        messages.innerHTML += `
          <div class="msg bot">
            ${data.reply}
            <div class="timestamp">${timeString}</div>
          </div>
        `;
        messages.scrollTop = messages.scrollHeight;
      })
      .catch(() => {
        typingIndicator.remove();
        messages.innerHTML += `
          <div class="msg bot">
            ‚ùå D√©sol√©, une erreur s'est produite. Veuillez r√©essayer plus tard.
            <div class="timestamp">${timeString}</div>
          </div>
        `;
        messages.scrollTop = messages.scrollHeight;
      });
    }, 1000);
  }
  
  // Send message on Enter or button click
  input.addEventListener('keydown', e => {
    if (e.key === 'Enter') sendMessage();
  });
  
  sendBtn.addEventListener('click', sendMessage);
  
  /* Theme Switcher */
  const themeToggle = document.getElementById('theme-toggle');
  const body = document.body;
  const savedTheme = localStorage.getItem('theme');
  
  if (savedTheme === 'dark') {
    body.classList.add('dark-mode');
    themeToggle.textContent = '‚òÄÔ∏è';
  } else {
    themeToggle.textContent = 'üåô';
  }
  
  themeToggle.addEventListener('click', () => {
    const isDark = body.classList.toggle('dark-mode');
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
    themeToggle.textContent = isDark ? '‚òÄÔ∏è' : 'üåô';
    reloadParticles();
  });
  
  /* Particles.js Background */
  function reloadParticles() {
    let isDark = document.body.classList.contains('dark-mode');
    
    particlesJS('particles-js', {
      "particles": {
        "number": { "value": isDark ? 80 : 60 },
        "color": { 
          "value": isDark ? ["#ffffff", "#f39c12", "#3498db"] : ["#f35525", "#ff6b3d", "#3498db"]
        },
        "shape": { "type": "circle" },
        "opacity": { 
          "value": isDark ? 0.7 : 0.5,
          "random": true 
        },
        "size": { 
          "value": isDark ? 3 : 4,
          "random": true 
        },
        "line_linked": {
          "enable": isDark,
          "distance": 150,
          "color": "#555",
          "opacity": 0.4,
          "width": 1
        },
        "move": { 
          "enable": true, 
          "speed": isDark ? 1.5 : 2,
          "out_mode": "out" 
        }
      },
      "interactivity": {
        "detect_on": "window",
        "events": { 
          "onhover": { 
            "enable": true, 
            "mode": isDark ? "bubble" : "repulse" 
          } 
        },
        "modes": {
          "bubble": {
            "distance": 200,
            "size": 6,
            "duration": 2,
            "opacity": 0.8,
            "speed": 3
          },
          "repulse": {
            "distance": 100,
            "duration": 0.4
          }
        }
      },
      "retina_detect": true
    });
  }
  
  // Initial load
  reloadParticles();
  
  // Add welcome message if no messages exist
  if (messages.children.length === 1) {
    setTimeout(() => {
      messages.innerHTML += `
        <div class="msg bot">
          Voici quelques choses que je peux faire pour vous :
          <ul style="margin-top: 8px; padding-left: 20px;">
            <li>R√©pondre √† vos questions sur les √©v√©nements</li>
            <li>Vous aider √† trouver des activit√©s</li>
            <li>Fournir des informations sur la plateforme</li>
          </ul>
          <div class="timestamp">Juste maintenant</div>
        </div>
      `;
      messages.scrollTop = messages.scrollHeight;
    }, 1500);
  }
});

// Accessibility - focus trap for chatbot
document.addEventListener('keydown', function(e) {
  const chatBox = document.getElementById('chatbot-box');
  if (chatBox.style.display === 'flex' && e.key === 'Escape') {
    document.getElementById('chat-close').click();
  }
});
</script>

{% block javascripts %}
<script>console.log("‚úÖ JS loaded correctly");</script>
{% endblock %}

{% include 'partials/footer.html.twig' %}

</body>

</html>