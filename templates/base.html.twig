<!DOCTYPE html>
<html lang="en">
{% include 'partials/head.html.twig' %}
<body>

<!-- 🌌 Particles background -->
<div id="particles-js" style="position: fixed; width: 100%; height: 100%; z-index: -1;"></div>

<style>
/* 🔥 Chatbot & Theme styles 🔥 */
#chatbot-toggle {
  position: fixed;
  bottom: 30px;
  right: 30px;
  width: 60px;
  height: 60px;
  background: linear-gradient(135deg, #f35525 0%, #ff6b3d 100%);
  color: white;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 24px;
  cursor: pointer;
  z-index: 1050;
  box-shadow: 0 4px 20px rgba(243, 85, 37, 0.3);
  transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
  border: none;
  outline: none;
}

#chatbot-toggle:hover {
  transform: scale(1.1);
  box-shadow: 0 6px 25px rgba(243, 85, 37, 0.4);
}

#chatbot-toggle.opened {
  transform: rotate(90deg);
  background: linear-gradient(135deg, #ff3d3d 0%, #f35525 100%);
}

#chatbot-box {
  position: fixed;
  bottom: 110px;
  right: 30px;
  width: 380px;
  max-width: calc(100vw - 60px);
  height: 500px;
  max-height: 70vh;
  background: white;
  border-radius: 16px;
  display: none;
  flex-direction: column;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
  z-index: 1050;
  overflow: hidden;
  transform: translateY(20px);
  opacity: 0;
  transition: all 0.3s ease-out;
}

#chatbot-box.visible {
  transform: translateY(0);
  opacity: 1;
}

#chat-header {
  background: linear-gradient(135deg, #f35525 0%, #ff6b3d 100%);
  color: white;
  padding: 16px;
  font-weight: 600;
  font-size: 16px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

#chat-header span {
  display: flex;
  align-items: center;
  gap: 8px;
}

#chat-close {
  background: rgba(255, 255, 255, 0.2);
  width: 28px;
  height: 28px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.2s;
}

#chat-close:hover {
  background: rgba(255, 255, 255, 0.3);
  transform: rotate(90deg);
}

#chat-messages {
  flex: 1;
  overflow-y: auto;
  padding: 16px;
  font-size: 15px;
  display: flex;
  flex-direction: column;
  gap: 12px;
  scroll-behavior: smooth;
}

/* Custom scrollbar */
#chat-messages::-webkit-scrollbar {
  width: 6px;
}

#chat-messages::-webkit-scrollbar-track {
  background: rgba(0, 0, 0, 0.05);
  border-radius: 10px;
}

#chat-messages::-webkit-scrollbar-thumb {
  background: rgba(0, 0, 0, 0.2);
  border-radius: 10px;
}

#chat-messages::-webkit-scrollbar-thumb:hover {
  background: rgba(0, 0, 0, 0.3);
}

#chat-input-container {
  display: flex;
  padding: 12px 16px;
  background: #f9f9f9;
  border-top: 1px solid #eee;
  gap: 8px;
}

#chat-input {
  flex: 1;
  border: 1px solid #ddd;
  border-radius: 24px;
  padding: 12px 16px;
  font-size: 15px;
  outline: none;
  transition: all 0.2s;
  background: white;
}

#chat-input:focus {
  border-color: #f35525;
  box-shadow: 0 0 0 2px rgba(243, 85, 37, 0.2);
}

#chat-send {
  width: 44px;
  height: 44px;
  border-radius: 50%;
  background: linear-gradient(135deg, #f35525 0%, #ff6b3d 100%);
  color: white;
  border: none;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.2s;
}

#chat-send:hover {
  transform: scale(1.05);
  box-shadow: 0 2px 10px rgba(243, 85, 37, 0.3);
}

#chat-send:active {
  transform: scale(0.98);
}

.msg {
  padding: 12px 16px;
  border-radius: 18px;
  max-width: 85%;
  line-height: 1.5;
  word-wrap: break-word;
  animation: fadeIn 0.3s ease-out;
  position: relative;
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}

.msg.user {
  background: #f35525;
  color: white;
  align-self: flex-end;
  border-bottom-right-radius: 4px;
  margin-left: 15%;
}

.msg.bot {
  background: #f5f5f5;
  color: #333;
  align-self: flex-start;
  border-bottom-left-radius: 4px;
  margin-right: 15%;
}

.msg.typing {
  background: #fff8e6;
  color: #856404;
  font-style: italic;
  display: flex;
  align-items: center;
  gap: 6px;
}

.typing-indicator {
  display: flex;
  gap: 4px;
}

.typing-indicator span {
  width: 8px;
  height: 8px;
  background: #f39c12;
  border-radius: 50%;
  display: inline-block;
  animation: bounce 1.4s infinite ease-in-out;
}

.typing-indicator span:nth-child(1) {
  animation-delay: 0s;
}

.typing-indicator span:nth-child(2) {
  animation-delay: 0.2s;
}

.typing-indicator span:nth-child(3) {
  animation-delay: 0.4s;
}

@keyframes bounce {
  0%, 60%, 100% { transform: translateY(0); }
  30% { transform: translateY(-5px); }
}

.timestamp {
  font-size: 11px;
  color: rgba(255, 255, 255, 0.7);
  margin-top: 4px;
  text-align: right;
}

.msg.bot .timestamp {
  color: rgba(0, 0, 0, 0.4);
}

#theme-toggle {
  position: fixed;
  top: 20px;
  right: 20px;
  z-index: 9999;
  background: linear-gradient(135deg, #f35525 0%, #ff6b3d 100%);
  border: none;
  color: white;
  font-size: 18px;
  width: 44px;
  height: 44px;
  border-radius: 50%;
  cursor: pointer;
  transition: all 0.3s;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  display: flex;
  align-items: center;
  justify-content: center;
}

#theme-toggle:hover {
  transform: scale(1.1);
  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);
}

/* Dark Mode */
body.dark-mode {
  background: #121212;
  color: #f1f1f1;
}

body.dark-mode .section,
body.dark-mode .container,
body.dark-mode .video-content,
body.dark-mode .contact-content,
body.dark-mode .featured,
body.dark-mode .properties,
body.dark-mode .fun-facts {
  background: #1e1e1e;
}

body.dark-mode .section-heading h2,
body.dark-mode h4,
body.dark-mode h6,
body.dark-mode p,
body.dark-mode span,
body.dark-mode li {
  color: #f1f1f1 !important;
}

body.dark-mode .category,
body.dark-mode .main-button a,
body.dark-mode input,
body.dark-mode textarea {
  background: #2d2d2d !important;
  color: #f1f1f1 !important;
  border: 1px solid #444 !important;
}

body.dark-mode #chatbot-box {
  background: #252525;
  border: 1px solid #333;
}

body.dark-mode #chat-header {
  background: linear-gradient(135deg, #d84315 0%, #f35525 100%);
}

body.dark-mode #chat-input-container {
  background: #2d2d2d;
  border-top: 1px solid #333;
}

body.dark-mode #chat-input {
  background: #333;
  color: #f1f1f1;
  border-color: #444;
}

body.dark-mode .msg.bot {
  background: #333;
  color: #f1f1f1;
}

body.dark-mode .msg.user {
  background: linear-gradient(135deg, #d84315 0%, #f35525 100%);
  color: white;
}

body.dark-mode .msg.typing {
  background: #423307;
  color: #f1c40f;
}

body.dark-mode .typing-indicator span {
  background: #f1c40f;
}

/* Responsive adjustments */
@media (max-width: 480px) {
  #chatbot-box {
    width: calc(100vw - 40px);
    right: 20px;
    bottom: 80px;
    height: 60vh;
  }
  
  #chatbot-toggle {
    bottom: 20px;
    right: 20px;
    width: 50px;
    height: 50px;
    font-size: 20px;
  }
}
</style>

<!-- 🔥 Chatbot Button -->
<button id="chatbot-toggle" aria-label="Open chatbot">💬</button>

<!-- 🔥 Chatbot Box -->
<div id="chatbot-box">
  <div id="chat-header">
    <span>🤖 Lamma Assistant</span>
    <div id="chat-close" aria-label="Close chatbot">✖</div>
  </div>
  <div id="chat-messages">
    <div class="msg bot">
      👋 Bonjour ! Je suis votre assistant personnalisé pour la plateforme Lamma. Comment puis-je vous aider aujourd'hui ?
      <div class="timestamp">Juste maintenant</div>
    </div>
  </div>
  <div id="chat-input-container">
    <input type="text" id="chat-input" placeholder="Écrivez votre message..." aria-label="Chat input">
    <button id="chat-send" aria-label="Send message">➤</button>
  </div>
  
</div>

<!-- 🌟 Main content -->
<div class="container py-5">
  {% block body %}{% endblock %}
  
  <!-- ✉️ Contact Section -->
  <div id="contact" class="mt-5 text-center">
    <h2>Contact Us</h2>
    <p>If you have any questions, feel free to reach us:</p>
    <p>Email: <a href="mailto:lamma.eventgroups@gmail.com">lamma.eventgroups@gmail.com</a></p>
    <p>Phone: +216 50 135 096</p>
  </div>
</div>

<!-- 🌙 Theme toggle button -->
<!-- 🌙 Theme toggle and Login buttons -->
<div class="fixed-buttons-container">
  <button id="theme-toggle" title="Toggle theme" aria-label="Toggle dark mode">🌓</button>
  {% if not app.user %}
    <a href="{{ path('app_login') }}" id="login-toggle" title="Login" aria-label="Login">
      👤
    </a>
  {% else %}
    <a href="{{ path('app_profile') }}" id="profile-toggle" title="Profile" aria-label="Profile">
      👤
    </a>
  {% endif %}
</div>

<style>
  /* Add this to your existing styles */
  .fixed-buttons-container {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 9999;
    display: flex;
    flex-direction: column;
    gap: 10px;
    align-items: flex-end;
  }
  
  #login-toggle,
  #profile-toggle {
    width: 44px;
    height: 44px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    text-decoration: none;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    transition: all 0.3s;
    background: linear-gradient(135deg, #3a7bd5 0%, #00d2ff 100%);
    color: white;
    font-size: 18px;
  }
  
  #profile-toggle {
    background: linear-gradient(135deg, #5f2c82 0%, #49a09d 100%);
  }
  
  #login-toggle:hover,
  #profile-toggle:hover {
    transform: scale(1.1);
    box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);
  }
</style>
<!-- Scripts -->
<script src="https://cdn.jsdelivr.net/npm/particles.js@2.0.0/particles.min.js"></script>
<script src="{{ asset('assets/jquery/jquery.min.js') }}"></script>
<script src="{{ asset('assets/js/bootstrap.min.js') }}"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script src="{{ asset('assets/js/isotope.min.js') }}"></script>
<script src="{{ asset('assets/js/owl-carousel.js') }}"></script>
<script src="{{ asset('assets/js/counter.js') }}"></script>
<script src="{{ asset('assets/js/custom.js') }}"></script>

<!-- Chatbot, Theme Switch and Particles Scripts -->
<script>
document.addEventListener('DOMContentLoaded', function() {
  const toggleBtn = document.getElementById('chatbot-toggle');
  const chatBox = document.getElementById('chatbot-box');
  const closeBtn = document.getElementById('chat-close');
  const input = document.getElementById('chat-input');
  const sendBtn = document.getElementById('chat-send');
  const messages = document.getElementById('chat-messages');
  
  // Toggle chat box with animation
  toggleBtn.addEventListener('click', () => {
    const isVisible = chatBox.classList.contains('visible');
    
    if (isVisible) {
      chatBox.classList.remove('visible');
      setTimeout(() => {
        chatBox.style.display = 'none';
      }, 300);
    } else {
      chatBox.style.display = 'flex';
      setTimeout(() => {
        chatBox.classList.add('visible');
      }, 10);
    }
    
    toggleBtn.classList.toggle('opened', !isVisible);
    input.focus();
  });
  
  // Close button
  closeBtn.addEventListener('click', () => {
    chatBox.classList.remove('visible');
    setTimeout(() => {
      chatBox.style.display = 'none';
      toggleBtn.classList.remove('opened');
    }, 300);
  });
  
  // Send message function
  function sendMessage() {
    const userMsg = input.value.trim();
    if (!userMsg) return;
    
    // Add timestamp
    const now = new Date();
    const timeString = now.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    
    // Add user message
    messages.innerHTML += `
      <div class="msg user">
        ${userMsg}
        <div class="timestamp">${timeString}</div>
      </div>
    `;
    input.value = '';
    messages.scrollTop = messages.scrollHeight;
    
    // Add typing indicator
    const typingIndicator = document.createElement('div');
    typingIndicator.className = 'msg typing';
    typingIndicator.innerHTML = `
      <div class="typing-indicator">
        <span></span><span></span><span></span>
      </div>
      Lamma réfléchit...
    `;
    messages.appendChild(typingIndicator);
    messages.scrollTop = messages.scrollHeight;
    
    // Simulate API call with delay
    setTimeout(() => {
      fetch('/api/chat', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ message: userMsg })
      })
      .then(res => res.json())
      .then(data => {
        typingIndicator.remove();
        messages.innerHTML += `
          <div class="msg bot">
            ${data.reply}
            <div class="timestamp">${timeString}</div>
          </div>
        `;
        messages.scrollTop = messages.scrollHeight;
      })
      .catch(() => {
        typingIndicator.remove();
        messages.innerHTML += `
          <div class="msg bot">
            ❌ Désolé, une erreur s'est produite. Veuillez réessayer plus tard.
            <div class="timestamp">${timeString}</div>
          </div>
        `;
        messages.scrollTop = messages.scrollHeight;
      });
    }, 1000);
  }
  
  // Send message on Enter or button click
  input.addEventListener('keydown', e => {
    if (e.key === 'Enter') sendMessage();
  });
  
  sendBtn.addEventListener('click', sendMessage);
  
  /* Theme Switcher */
  const themeToggle = document.getElementById('theme-toggle');
  const body = document.body;
  const savedTheme = localStorage.getItem('theme');
  
  if (savedTheme === 'dark') {
    body.classList.add('dark-mode');
    themeToggle.textContent = '☀️';
  } else {
    themeToggle.textContent = '🌙';
  }
  
  themeToggle.addEventListener('click', () => {
    const isDark = body.classList.toggle('dark-mode');
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
    themeToggle.textContent = isDark ? '☀️' : '🌙';
    reloadParticles();
  });
  
  /* Particles.js Background */
  function reloadParticles() {
    let isDark = document.body.classList.contains('dark-mode');
    
    particlesJS('particles-js', {
      "particles": {
        "number": { "value": isDark ? 80 : 60 },
        "color": { 
          "value": isDark ? ["#ffffff", "#f39c12", "#3498db"] : ["#f35525", "#ff6b3d", "#3498db"]
        },
        "shape": { "type": "circle" },
        "opacity": { 
          "value": isDark ? 0.7 : 0.5,
          "random": true 
        },
        "size": { 
          "value": isDark ? 3 : 4,
          "random": true 
        },
        "line_linked": {
          "enable": isDark,
          "distance": 150,
          "color": "#555",
          "opacity": 0.4,
          "width": 1
        },
        "move": { 
          "enable": true, 
          "speed": isDark ? 1.5 : 2,
          "out_mode": "out" 
        }
      },
      "interactivity": {
        "detect_on": "window",
        "events": { 
          "onhover": { 
            "enable": true, 
            "mode": isDark ? "bubble" : "repulse" 
          } 
        },
        "modes": {
          "bubble": {
            "distance": 200,
            "size": 6,
            "duration": 2,
            "opacity": 0.8,
            "speed": 3
          },
          "repulse": {
            "distance": 100,
            "duration": 0.4
          }
        }
      },
      "retina_detect": true
    });
  }
  
  // Initial load
  reloadParticles();
  
  // Add welcome message if no messages exist
  if (messages.children.length === 1) {
    setTimeout(() => {
      messages.innerHTML += `
        <div class="msg bot">
          Voici quelques choses que je peux faire pour vous :
          <ul style="margin-top: 8px; padding-left: 20px;">
            <li>Répondre à vos questions sur les événements</li>
            <li>Vous aider à trouver des activités</li>
            <li>Fournir des informations sur la plateforme</li>
          </ul>
          <div class="timestamp">Juste maintenant</div>
        </div>
      `;
      messages.scrollTop = messages.scrollHeight;
    }, 1500);
  }
});

// Accessibility - focus trap for chatbot
document.addEventListener('keydown', function(e) {
  const chatBox = document.getElementById('chatbot-box');
  if (chatBox.style.display === 'flex' && e.key === 'Escape') {
    document.getElementById('chat-close').click();
  }
});
</script>

{% block javascripts %}
<script>console.log("✅ JS loaded correctly");</script>
{% endblock %}
</body>
</html>