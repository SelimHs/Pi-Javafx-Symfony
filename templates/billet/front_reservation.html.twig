{% extends 'base.html.twig' %}

{% block title %}R√©server un Billet{% endblock %}

{% block body %}
<div style="display: flex; flex-direction: column; min-height: 60vh;">
  <main style="flex: 1;">
    <style>
      body.dark-mode .card {
        background-color: #1a1a1a !important;
        color: #f1f1f1 !important;
      }
      body.dark-mode label,
      body.dark-mode .btn,
      body.dark-mode .input-group {
        color: #ffffff !important;
      }
      body.dark-mode .form-control,
      body.dark-mode .form-select {
        background-color: #ffffff !important;
        color: #000 !important;
        border-color: #ccc !important;
      }
    </style>

    <div class="container mt-5">
      <div class="card p-4 shadow-lg border-0 rounded-4">
        <h2 class="text-center mb-4 text-white">+ R√©server un Billet</h2>

        {{ form_start(form, {'attr': {'class': 'row g-3', 'id': 'reservation-form', 'novalidate': 'novalidate'}}) }}

          <div class="col-md-6">
            {{ form_label(form.proprietaire) }}
            {{ form_widget(form.proprietaire, {'attr': {'class': 'form-control'}}) }}
            {{ form_errors(form.proprietaire) }}
          </div>

          <div class="col-md-6">
            <label for="billet_prix" class="text-white">üí∞ Prix du billet</label>
            {{ form_widget(form.prix, {
              'attr': {
                'readonly': 'readonly',
                'id': 'billet_prix',
                'class': 'form-control'
              }
            }) }}
            {{ form_errors(form.prix) }}
          </div>

          <div class="col-md-6">
            {{ form_label(form.type) }}
            {{ form_widget(form.type, {'attr': {'class': 'form-select', 'id': 'billet_type'}}) }}
            {{ form_errors(form.type) }}
          </div>

          <div class="col-md-6">
            {{ form_label(form.event) }}
            {{ form_widget(form.event, {
              'attr': {
                'class': 'form-select',
                'readonly': 'readonly'
              }
            }) }}
          </div>

          <div class="col-md-8">
            {{ form_label(form.codePromo) }}
            <div class="input-group">
              {{ form_widget(form.codePromo, {'attr': {'class': 'form-control', 'id': 'codePromo'}}) }}
              <button type="button" id="verifierBtn" class="btn btn-success">‚úî V√©rifier</button>
            </div>
          </div>

          <div class="col-md-4 d-flex align-items-end">
            <button type="button" id="openPaymentModal" class="btn btn-warning w-100">‚úî Confirmer la R√©servation</button>
          </div>

        {{ form_end(form) }}
      </div>
    </div>

    <!-- Modal Bootstrap pour paiement -->
    <div class="modal fade" id="paymentModal" tabindex="-1" aria-labelledby="paymentModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content p-4">
          <div class="modal-header">
            <h5 class="modal-title">Paiement S√©curis√©</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
          </div>
          <div class="modal-body">
            <form id="payment-form">
              <div id="card-element" class="form-control mb-3" style="height: 50px;"></div>
              <button id="payButton" class="btn btn-primary w-100">üîí Payer</button>
            </form>
            <div id="payment-message" class="text-center mt-3"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Scripts Stripe & Logic -->
    <script src="https://js.stripe.com/v3/"></script>
    <script>
    document.addEventListener('DOMContentLoaded', function () {
      const prixBase = {{ prixFinal }};
      const prixInput = document.getElementById('billet_prix');
      const typeSelect = document.getElementById('billet_type');
      const codePromoInput = document.getElementById('codePromo');
      const verifierBtn = document.getElementById('verifierBtn');
      const reservationForm = document.getElementById('reservation-form');
      const openPaymentModal = document.getElementById('openPaymentModal');
      const paymentForm = document.getElementById('payment-form');
      const payButton = document.getElementById('payButton');
      const paymentMessage = document.getElementById('payment-message');

      let remiseActuelle = 0;
      const remises = {{ promoCodes|json_encode|raw }};
      let clientSecret = '';

      function calculerPrix(type, remisePourcent = 0) {
        let prix = prixBase;
        if (type === 'DUO') prix += prixBase * 0.5;
        else if (type === 'VIP') prix = prixBase * 3;
        prix -= prix * (remisePourcent / 100);
        return Math.round(Math.max(prix, 0));
      }

      function updatePrix() {
        const type = typeSelect.value;
        prixInput.value = calculerPrix(type, remiseActuelle);
      }

      verifierBtn.addEventListener('click', () => {
        const code = codePromoInput.value.trim().toUpperCase();
        if (remises.hasOwnProperty(code)) {
          remiseActuelle = remises[code];
          alert(`‚úÖ Code promo "${code}" appliqu√© : -${remiseActuelle}%`);
        } else {
          remiseActuelle = 0;
          alert('‚ùå Code promo invalide');
        }
        updatePrix();
      });

      if (typeSelect) {
        typeSelect.addEventListener('change', updatePrix);
      }

      updatePrix();

      // üîµ Stripe
      const stripe = Stripe('pk_test_51QzP2uPFHNYg7RkV82G27X88hJoMnK5XAY0R7Z46fmAIy5cpKCUgLD4uvC0mWh5IP4poVsrVrDWzHsrtryAoXkcv007AF6F4hh'); // ‚Üê Mets ta cl√© publique ici
      const elements = stripe.elements();
      const card = elements.create('card', {
        style: {
          base: {
            fontSize: '16px',
            color: '#32325d',
            '::placeholder': { color: '#aab7c4' }
          },
          invalid: { color: '#fa755a', iconColor: '#fa755a' }
        }
      });
      card.mount('#card-element');

      openPaymentModal.addEventListener('click', async function (e) {
  e.preventDefault();

  if (!reservationForm.checkValidity()) {
    reservationForm.reportValidity();
    return;
  }

  try {
    const response = await fetch('{{ path("app_create_payment_intent") }}', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ prix: prixInput.value })
    });

    const data = await response.json();
    clientSecret = data.clientSecret;

    const paymentModal = new bootstrap.Modal(document.getElementById('paymentModal'));
    paymentModal.show();
  } catch (error) {
    console.error('Error:', error);
    paymentMessage.innerHTML = `<div style="color:red;">‚ùå Erreur lors de la pr√©paration du paiement</div>`;
  }
});


      paymentForm.addEventListener('submit', async function (e) {
        e.preventDefault();
        payButton.disabled = true;
        paymentMessage.innerHTML = "<div class='spinner-border text-primary' role='status'></div> ‚è≥ Traitement...";

        const { error, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {
          payment_method: { card: card }
        });

        if (error) {
          paymentMessage.innerHTML = `<div style="color:red;">‚ùå Paiement √©chou√© : ${error.message}</div>`;
          payButton.disabled = false;
        } else if (paymentIntent.status === 'succeeded') {
          paymentMessage.innerHTML = `
            <div style="color:green; font-size: 22px;">
              ‚úÖ Paiement R√©ussi !
            </div>
            <div style="font-size: 16px; color: gray;">Enregistrement de votre r√©servation...</div>
          `;

          // Soumettre le formulaire apr√®s paiement r√©ussi
          try {
            // Ajouter un champ cach√© pour indiquer que le paiement est r√©ussi
            const hiddenInput = document.createElement('input');
            hiddenInput.type = 'hidden';
            hiddenInput.name = 'payment_success';
            hiddenInput.value = '1';
            reservationForm.appendChild(hiddenInput);
            
            // Soumettre le formulaire
            reservationForm.submit();
          } catch (error) {
            console.error('Error:', error);
            paymentMessage.innerHTML = `<div style="color:red;">‚ùå Erreur lors de l'enregistrement</div>`;
          }
        }
      });
    });
    </script>
  </main>
</div>
{% endblock %}
