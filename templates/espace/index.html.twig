{% extends 'base.html.twig' %}

{% block title %}Espaces{% endblock %}

{% block body %}
<div class="page-heading header-text">
  <div class="container">
    <div class="row">
      <div class="col-lg-12">
        <span class="breadcrumb"><a href="{{ path('app_home') }}">Accueil</a> / Espaces</span>
        <h3>Espaces</h3>
      </div>
    </div>
  </div>
</div>

<div class="section properties">
  <div class="container">
    <div class="row mb-4">
      <div class="col-lg-12 text-center">
        <input type="text" id="searchEspace" class="form-control w-50 mx-auto" placeholder="Rechercher un espace...">
      </div>
    </div>
    <!-- Bouton pour afficher les r√©servations -->
<div class="row mb-4">
  <div class="col-lg-12 text-center">
    <button class="btn btn-info" data-bs-toggle="modal" data-bs-target="#reservationListModal">üìã Liste des r√©servations</button>
  </div>
</div>

<!-- Modale affichage r√©servations -->
<div class="modal fade" id="reservationListModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Liste des R√©servations</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <div id="reservationLoader" class="text-center">Chargement...</div>
        <div id="reservationContent" style="display: none;">
          <table class="table table-bordered">
            <thead>
              <tr>
                <th>Nom</th>
                <th>Date D√©but</th>
                <th>Date Fin</th>
                <th>Espace</th>
                <th>Organisateur</th>
                <th>Prix</th>
              </tr>
            </thead>
            <tbody id="reservationTableBody"></tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>



    <div class="row properties-box" id="espaceGrid">
      <div class="col-lg-4 col-md-6 align-self-center mb-30 properties-items espace-card">
        <a href="{{ path('app_espace_new') }}" class="text-decoration-none">
          <div class="item position-relative shadow-sm text-center d-flex flex-column justify-content-center align-items-center add-espace-card" style="height: 100%; min-height: 420px;">
            <i class="fa fa-plus-circle fa-3x text-white mb-3"></i>
            <h5 class="text-white">Cr√©er un nouvel espace</h5>
            <p class="text-white">Cliquez ici pour ajouter un nouvel espace</p>
          </div>
        </a>
      </div>

      {% for espace in espaces %}
        <div class="col-lg-4 col-md-6 align-self-center mb-30 properties-items espace-card">
          <div class="item position-relative shadow-sm">
            <a href="{{ path('app_espace_show', {'idEspace': espace.idEspace}) }}">
              <img src="{{ asset('uploads/' ~ (espace.image is not empty ? espace.image : 'exemple.jpg')) }}" class="card-img-top" alt="{{ espace.nomEspace }}">
            </a>
            <span class="category">{{ espace.TypeEspace }}</span>
            <h6>{{ espace.prix }} Dt</h6>
            <h4><a href="{{ path('app_espace_show', {'idEspace': espace.idEspace}) }}">{{ espace.nomEspace }}</a></h4>
            <ul>
              <li>Adresse : <span>{{ espace.adresse }}</span></li>
              <li>Capacit√© : <span>{{ espace.capacite }}</span></li>
              <li>Disponibilit√© : <span class="badge {{ espace.disponibilite == 'Disponible' ? 'bg-success' : 'bg-danger' }}">{{ espace.disponibilite }}</span></li>
            </ul>
            <div class="main-button d-flex flex-column gap-2 align-items-center mt-2">
              <a href="{{ path('app_espace_show', {'idEspace': espace.idEspace}) }}" class="btn btn-outline-primary w-75">üîç D√©tails</a>
              {% if espace.disponibilite == 'Disponible' %}
                <button class="btn btn-outline-success w-75" data-bs-toggle="modal" data-bs-target="#reservationModal{{ espace.idEspace }}">üìÖ R√©server</button>
              {% else %}
                <button class="btn btn-outline-secondary w-75" disabled>‚õî Indisponible</button>
              {% endif %}
            </div>
          </div>
        </div>

        <div class="modal fade" id="reservationModal{{ espace.idEspace }}" tabindex="-1" aria-hidden="true">
          <div class="modal-dialog">
            <div class="modal-content">
              <form class="reservation-form" data-espace-id="{{ espace.idEspace }}">
                <div class="modal-header">
                  <h5 class="modal-title">R√©server {{ espace.nomEspace }}</h5>
                  <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                  <div class="mb-3">
                    <label>Nom complet</label>
                    <input type="text" name="nom_complet" class="form-control" required>
                  </div>
                  <div class="mb-3">
                    <label>Date d√©but</label>
                    <input type="date" name="date_debut" class="form-control" required>
                  </div>
                  <div class="mb-3">
                    <label>Date fin</label>
                    <input type="date" name="date_fin" class="form-control" required>
                  </div>
                  {% if espace.organisateurs is not empty %}
                  <div class="mb-3">
                    <label>Organisateur</label>
                    <select name="id_organisateur" class="form-select">
                      <option value="">-- Aucun organisateur --</option>
                      {% for org in espace.organisateurs %}
                        <option value="{{ org.id_org }}">{{ org.nom_org }} {{ org.prenom_org }}</option>
                      {% endfor %}
                    </select>
                  </div>
                  {% endif %}
                </div>
                <div class="modal-footer">
                  <button type="submit" class="btn btn-primary">Valider</button>
                  <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                </div>
              </form>
            </div>
          </div>
        </div>
      {% else %}
        <div class="col-12 text-center">
          <div class="alert alert-warning">Aucun espace trouv√©.</div>
        </div>
      {% endfor %}
    </div>
  </div>
</div>
{% endblock %}
{% block javascripts %}
{{ parent() }}
<script>
document.addEventListener("DOMContentLoaded", function () {
  const today = new Date();
  const minStartDate = new Date(today.setDate(today.getDate() + 7)).toISOString().split('T')[0];

  document.querySelectorAll('.reservation-form').forEach(form => {
    const dateDebutInput = form.querySelector('input[name="date_debut"]');
    const dateFinInput = form.querySelector('input[name="date_fin"]');

    if (dateDebutInput) dateDebutInput.min = minStartDate;

    dateDebutInput?.addEventListener('change', () => {
      const start = new Date(dateDebutInput.value);
      const minEnd = new Date(start.getTime() + 24 * 60 * 60 * 1000); // +1 jour
      dateFinInput.min = minEnd.toISOString().split('T')[0];
    });

    form.addEventListener('submit', async function (e) {
      e.preventDefault();

      const dateDebut = new Date(dateDebutInput.value);
      const dateFin = new Date(dateFinInput.value);

      if (dateDebut < new Date(minStartDate)) {
        alert("‚ùå La r√©servation ne peut commencer qu‚Äô√† partir de 7 jours apr√®s aujourd‚Äôhui.");
        return;
      }

      if (dateFin <= dateDebut) {
        alert("‚ùå La date de fin doit √™tre au moins 1 jour apr√®s la date de d√©but.");
        return;
      }

      const formData = new FormData(this);
      const payload = {
        nom_complet: formData.get('nom_complet')?.trim(),
        date_debut: formData.get('date_debut'),
        date_fin: formData.get('date_fin'),
        id_espace: this.dataset.espaceId,
        id_organisateur: formData.get('id_organisateur') || ''
      };

      try {
        const response = await fetch("{{ path('api_reserver_sheetbest') }}", {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });

        const result = await response.json();

        if (result.success) {
          alert("‚úÖ R√©servation enregistr√©e !");
          const closeBtn = this.closest('.modal').querySelector('.btn-close');
          closeBtn?.click();
        } else {
          alert("‚ùå Erreur : " + (result.error || "Erreur inconnue."));
        }
      } catch (error) {
        alert("‚ùå Erreur technique : " + error.message);
        console.error(error);
      }
    });
  });
});

</script>
<script>
document.addEventListener("DOMContentLoaded", function () {
  const modal = document.getElementById('reservationListModal');
  const loader = document.getElementById('reservationLoader');
  const content = document.getElementById('reservationContent');
  const tbody = document.getElementById('reservationTableBody');

  modal.addEventListener('show.bs.modal', async () => {
    loader.style.display = 'block';
    content.style.display = 'none';
    tbody.innerHTML = '';

    try {
      const response = await fetch("{{ path('app_reservations_liste') }}");
      const data = await response.json();

      if (Array.isArray(data)) {
        data.forEach(res => {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td>${res.nom_complet ?? '-'}</td>
            <td>${formatDate(res.date_debut)}</td>
            <td>${formatDate(res.date_fin)}</td>
            <td>${res.id_espace ?? '-'}</td>
            <td>${res.id_organisateur || '‚Äî'}</td>
            <td>${res.prix ?? '0'} Dt</td>
          `;
          tbody.appendChild(row);
        });

        loader.style.display = 'none';
        content.style.display = 'block';
      } else {
        loader.innerHTML = '‚ùå Format de donn√©es invalide.';
      }
    } catch (e) {
      loader.innerHTML = '‚ùå Erreur lors du chargement des donn√©es.';
      console.error(e);
    }
  });

  function formatDate(excelDate) {
    if (!excelDate || isNaN(excelDate)) return '-';
    // Convertit un timestamp Excel vers un format lisible
    const baseDate = new Date(Date.UTC(1899, 11, 30));
    baseDate.setDate(baseDate.getDate() + parseInt(excelDate));
    return baseDate.toISOString().split('T')[0];
  }
});

</script>

{% endblock %}
