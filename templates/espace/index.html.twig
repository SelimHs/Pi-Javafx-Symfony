{% extends 'base.html.twig' %}

{% block title %}Espaces{% endblock %}

{% block body %}
<div class="page-heading header-text">
  <div class="container">
    <div class="row">
      <div class="col-lg-12">
        <span class="breadcrumb"><a href="{{ path('app_home') }}">Accueil</a> / Espaces</span>
        <h3>Espaces</h3>
      </div>
    </div>
  </div>
</div>

<div class="section properties">
  <div class="container">
    <div class="row mb-4">
      <div class="col-lg-12 text-center">
        <input type="text" id="searchEspace" class="form-control w-50 mx-auto" placeholder="Rechercher un espace...">
      </div>
    </div>
    
    <!-- Bouton pour afficher les r√©servations -->
<div class="row mb-4">
  <div class="col-lg-12 text-center">
    <button class="btn btn-info" data-bs-toggle="modal" data-bs-target="#reservationListModal">üìã Liste des r√©servations</button>
  </div>
</div>

<!-- Modale affichage r√©servations -->
<div class="modal fade" id="reservationListModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Liste des R√©servations</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <div id="reservationLoader" class="text-center">Chargement...</div>
        <div id="reservationContent" style="display: none;">
          <table class="table table-bordered">
            <thead>
              <tr>
                <th>Nom</th>
                <th>Date D√©but</th>
                <th>Date Fin</th>
                <th>Espace</th>
                <th>Organisateur</th>
                <th>Prix</th>
              </tr>
            </thead>
            <tbody id="reservationTableBody"></tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>



    <div class="row properties-box" id="espaceGrid">
      <div class="col-lg-4 col-md-6 align-self-center mb-30 properties-items espace-card">
        <a href="{{ path('app_espace_new') }}" class="text-decoration-none">
          <div class="item position-relative shadow-sm text-center d-flex flex-column justify-content-center align-items-center add-espace-card"
         style="height: 100%; min-height: 420px; background-color: #007bff; transition: all 0.3s ease;">
      <i class="fa fa-plus-circle fa-3x text-white mb-3"></i>
      <h5 class="text-white">Cr√©er un nouvel espace</h5>
      <p class="text-white">Cliquez ici pour ajouter un nouvel espace</p>
    </div>
        </a>
      </div>

      {% for espace in espaces %}
        <div class="col-lg-4 col-md-6 align-self-center mb-30 properties-items espace-card">
          <div class="item position-relative shadow-sm">
            <a href="{{ path('app_espace_show', {'idEspace': espace.idEspace}) }}">
              <img src="{{ asset('uploads/' ~ (espace.image is not empty ? espace.image : 'exemple.jpg')) }}" class="card-img-top" alt="{{ espace.nomEspace }}">
            </a>
            <span class="category">{{ espace.TypeEspace }}</span>
            <h6>{{ espace.prix }} Dt</h6>
            <h4><a href="{{ path('app_espace_show', {'idEspace': espace.idEspace}) }}">{{ espace.nomEspace }}</a></h4>
            <ul>
              <li>Adresse : <span>{{ espace.adresse }}</span></li>
              <li>Capacit√© : <span>{{ espace.capacite }}</span></li>
              <li>Disponibilit√© : <span class="badge {{ espace.disponibilite == 'Disponible' ? 'bg-success' : 'bg-danger' }}">{{ espace.disponibilite }}</span></li>
            </ul>
            <div class="main-button d-flex flex-column gap-2 align-items-center mt-2">
              <a href="{{ path('app_espace_show', {'idEspace': espace.idEspace}) }}" class="btn btn-outline-primary w-75">üîç D√©tails</a>
              {% if espace.disponibilite == 'Disponible' %}
                <button class="btn btn-outline-success w-75" data-bs-toggle="modal" data-bs-target="#reservationModal{{ espace.idEspace }}">üìÖ R√©server</button>
              {% else %}
                <button class="btn btn-outline-secondary w-75" disabled>‚õî Indisponible</button>
              {% endif %}
            </div>
          </div>
        </div>

        <div class="modal fade" id="reservationModal{{ espace.idEspace }}" tabindex="-1" aria-hidden="true">
          <div class="modal-dialog">
            <div class="modal-content">
<form class="reservation-form" id="form-espace-{{ espace.idEspace }}" data-espace-id="{{ espace.idEspace }}" data-prix-espace="{{ espace.prix }}">
                <div class="modal-header">
                  <h5 class="modal-title">R√©server {{ espace.nomEspace }}</h5>
                  <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                <div class="text-center mb-3">
  <strong class="prix-estime text-primary fs-5">üí∞ Prix estim√© : {{ espace.prix }} Dt</strong>
</div>

                  <div class="mb-3">
                    <label>Nom complet</label>
                    <input type="text" name="nom_complet" class="form-control" required>
                  </div>
                  <div class="mb-3">
                    <label>Date d√©but</label>
                    <input type="date" name="date_debut" class="form-control date-debut" required>
                  </div>
                  <div class="mb-3">
                    <label>Date fin</label>
<input type="date" name="date_fin" class="form-control date-fin" required>
                  </div>
                  {% if espace.organisateurs is not empty %}
                  <div class="mb-3">
                    <label>Organisateur</label>
                    <select name="id_organisateur" class="form-select">
                      <option value="">-- Aucun organisateur --</option>
                      {% for org in espace.organisateurs %}
                        <option value="{{ org.id_org }}">{{ org.nom_org }} {{ org.prenom_org }}</option>
                      {% endfor %}
                    </select>
                  </div>
                  {% endif %}
                </div>
                <div class="modal-footer">
                  <button type="submit" class="btn btn-primary">Valider</button>
                  <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                </div>
              </form>
            </div>
          </div>
        </div>
      {% else %}
        <div class="col-12 text-center">
          <div class="alert alert-warning">Aucun espace trouv√©.</div>
        </div>
      {% endfor %}
    </div>
  </div>
</div>
{% endblock %}
{% block javascripts %}
{{ parent() }}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

<script>
document.addEventListener("DOMContentLoaded", function () {
  const today = new Date();
  const minStartDate = new Date(today.setDate(today.getDate() + 7)).toISOString().split('T')[0];

  document.querySelectorAll('.reservation-form').forEach(form => {
    const dateDebutInput = form.querySelector('input[name="date_debut"]');
    const dateFinInput = form.querySelector('input[name="date_fin"]');
    const organisateurSelect = form.querySelector('select[name="id_organisateur"]');
    const prixEstimeEl = form.querySelector('.prix-estime');
    const prixEspace = parseFloat(form.dataset.prixEspace);

    // üßÆ Calcul prix affich√©
    function calculerPrix() {
      if (!dateDebutInput.value || !dateFinInput.value) return;
      const debut = new Date(dateDebutInput.value);
      const fin = new Date(dateFinInput.value);
      let jours = Math.floor((fin - debut) / (1000 * 60 * 60 * 24)) + 1;
      if (jours <= 0) jours = 1;

      let total = prixEspace * jours;
      if (organisateurSelect && organisateurSelect.value) {
        total += 200;
      }

      if (prixEstimeEl) {
        prixEstimeEl.textContent = `üí∞ Prix estim√© : ${total} Dt`;
      }

      return total;
    }

    // ‚è± Dates autoris√©es
    if (dateDebutInput) dateDebutInput.min = minStartDate;
    dateDebutInput?.addEventListener('change', () => {
      const start = new Date(dateDebutInput.value);
      const minEnd = new Date(start);
      dateFinInput.min = minEnd.toISOString().split('T')[0];
    });

    dateDebutInput?.addEventListener('change', calculerPrix);
    dateFinInput?.addEventListener('change', calculerPrix);
    organisateurSelect?.addEventListener('change', calculerPrix);

    // üöÄ Envoi du formulaire
    form.addEventListener('submit', async function (e) {
      e.preventDefault();

      const formData = new FormData(this);
      const dateDebut = new Date(dateDebutInput.value);
      const dateFin = new Date(dateFinInput.value);

      if (dateDebut < new Date(minStartDate)) {
        alert("‚ùå La r√©servation ne peut commencer qu‚Äô√† partir de 7 jours apr√®s aujourd‚Äôhui.");
        return;
      }

      if (dateFin < dateDebut) {
        alert("‚ùå La date de fin ne peut pas √™tre avant la date de d√©but.");
        return;
      }

      const prixTotal = calculerPrix(); // üëà r√©cup√®re le total

      const payload = {
        nom_complet: formData.get('nom_complet')?.trim(),
        date_debut: formData.get('date_debut'),
        date_fin: formData.get('date_fin'),
        id_espace: this.dataset.espaceId,
        id_organisateur: formData.get('id_organisateur') || '',
        prix: prixTotal
      };

      try {
        const response = await fetch("{{ path('api_reserver_sheetbest') }}", {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });

        const result = await response.json();
        console.log(result);

        if (result.success) {
          alert("‚úÖ R√©servation enregistr√©e !\nüí∞ Prix : " + result.prix + " Dt");
          const closeBtn = this.closest('.modal')?.querySelector('.btn-close');
          closeBtn?.click();
        } else {
          alert("‚ùå Erreur : " + (result.error || "Erreur inconnue."));
        }
      } catch (error) {
        alert("‚ùå Erreur technique : " + error.message);
        console.error(error);
      }
    });
  });
});
</script>

<script>
document.addEventListener("DOMContentLoaded", function() {
    const reservationModal = document.getElementById('reservationListModal');
    const loader = document.getElementById('reservationLoader');
    const content = document.getElementById('reservationContent');
    const tbody = document.getElementById('reservationTableBody');
    let modalInitialized = false;

    if (reservationModal) {
        reservationModal.addEventListener('show.bs.modal', async () => {
            if (modalInitialized) return;
            modalInitialized = true;

            loader.style.display = 'block';
            content.style.display = 'none';
            tbody.innerHTML = '';

            try {
                // Appels SheetBest et noms Symfony
                const [resData, nomsData] = await Promise.all([
                    fetch('https://api.sheetbest.com/sheets/4d538bcb-a52a-4dde-84e4-ddb7c9520d8e').then(r => r.json()),
                    fetch('/api/noms').then(r => r.json())
                ]);

                if (!Array.isArray(resData)) {
                    throw new Error('Format de donn√©es invalide.');
                }

                tbody.innerHTML = '';

                resData.forEach(res => {
                    const nomEspace = nomsData.espaces?.[res.id_espace] ?? `#${res.id_espace}`;
                    const nomOrga = nomsData.organisateurs?.[res.id_organisateur] ?? '‚Äî';

                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${res.nom_complet || '-'}</td>
                        <td>${res.date_debut || '-'}</td>
                        <td>${res.date_fin || '-'}</td>
                        <td>${nomEspace}</td>
                        <td>${nomOrga}</td>
                        <td>${res.prix ? res.prix + ' Dt' : '-'}</td>
                    `;
                    tbody.appendChild(row);
                });

                loader.style.display = 'none';
                content.style.display = 'block';
            } catch (e) {
                loader.innerHTML = `‚úï Erreur : ${e.message}`;
                console.error("Erreur affichage r√©servations :", e);
            }
        });

        reservationModal.addEventListener('hidden.bs.modal', () => {
            modalInitialized = false;
        });
    }
});

</script>

<script>
document.addEventListener("DOMContentLoaded", function () {
  const searchInput = document.getElementById('searchEspace');
  const espaceCards = document.querySelectorAll('#espaceGrid .espace-card');

  searchInput.addEventListener('input', function () {
    const query = this.value.trim().toLowerCase();
    espaceCards.forEach(card => {
      const title = card.querySelector('h4 a')?.textContent.toLowerCase() || '';
      const match = title.includes(query);
      if (!card.id.includes("ajouterEspaceCard")) {
        card.style.display = match ? 'block' : 'none';
      }
    });
  });
});
</script>

<script>
document.addEventListener("DOMContentLoaded", function () {
  document.querySelectorAll('.reservation-form').forEach(form => {
    const espaceId = form.dataset.espaceId;
    const modal = form.closest('.modal');

    modal.addEventListener('show.bs.modal', async () => {
      try {
        const response = await fetch('https://api.sheetbest.com/sheets/4d538bcb-a52a-4dde-84e4-ddb7c9520d8e');
        const reservations = await response.json();
        const disableDates = [];

        reservations.forEach(res => {
          if (res.id_espace == espaceId) {
            const startDate = new Date(res.date_debut);
            const endDate = new Date(res.date_fin);

            let current = new Date(startDate);
            while (current <= endDate) {
              disableDates.push(current.toISOString().split('T')[0]);
              current.setDate(current.getDate() + 1);
            }
          }
        });

        const dateDebutPicker = flatpickr(form.querySelector('.date-debut'), {
  minDate: new Date(new Date().setDate(new Date().getDate() + 7)),
  disable: disableDates,
  dateFormat: "Y-m-d",
  onChange: function (selectedDates) {
    if (selectedDates.length > 0) {
      const selectedStartDate = selectedDates[0];

      // Mettre √† jour le minDate de la date de fin
      dateFinPicker.set('minDate', selectedStartDate);

      // Supprimer et recharger le picker pour appliquer la nouvelle minDate
      dateFinPicker.setDate(null);
    }
  }
});

const dateFinPicker = flatpickr(form.querySelector('.date-fin'), {
  minDate: new Date(new Date().setDate(new Date().getDate() + 7)),
  disable: disableDates,
  dateFormat: "Y-m-d"
});


      } catch (err) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des r√©servations :", err);
      }
    });
  });
});
</script>
{% endblock %}