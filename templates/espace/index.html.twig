{% extends 'base.html.twig' %}

{% block title %}Espaces{% endblock %}

{% block body %}
<style>
  body.dark-mode input.form-control {
    background-color: #fff !important;
    color: #000 !important;
    border: 1px solid #ccc;
  }
  body.dark-mode .item {
    background-color: #1e1e1e;
    color: #f1f1f1;
    border: 1px solid #333;
  }
  body.dark-mode .btn-outline-primary {
    color: #90caf9;
    border-color: #90caf9;
  }
  body.dark-mode .btn-outline-primary:hover {
    background-color: #90caf9;
    color: #000;
  }
  body.dark-mode .btn-outline-success {
    color: #a5d6a7;
    border-color: #a5d6a7;
  }
  body.dark-mode .btn-outline-success:hover {
    background-color: #a5d6a7;
    color: #000;
  }
  body.dark-mode .modal-content {
    background-color: #2c2c2c;
    color: #f1f1f1;
  }
  body.dark-mode .table {
    color: #f1f1f1;
  }
  body.dark-mode .table-bordered th,
  body.dark-mode .table-bordered td {
    border-color: #444;
  }
  body.dark-mode .form-select {
    background-color: #fff !important;
    color: #000 !important;
    border: 1px solid #ccc;
  }
</style>

<div class="page-heading header-text">
  <div class="container">
    <div class="row">
      <div class="col-lg-12">
        <span class="breadcrumb"><a href="{{ path('app_home') }}">Accueil</a> / Espaces</span>
        <h3>Espaces</h3>
      </div>
    </div>
  </div>
</div>

<div class="section properties">
  <div class="container">
    <div class="row mb-4">
      <div class="col-lg-12 text-center">
        <input type="text" id="searchEspace" class="form-control w-50 mx-auto" placeholder="Rechercher un espace...">
      </div>
    </div>

    <div class="row mb-4">
      <div class="col-lg-12 text-center">
        <button class="btn btn-info" data-bs-toggle="modal" data-bs-target="#reservationListModal">üìã Liste des r√©servations</button>
      </div>
    </div>

    <div class="modal fade" id="reservationListModal" tabindex="-1">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Liste des R√©servations</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
          </div>
          <div class="modal-body">
            <div id="reservationLoader" class="text-center">Chargement...</div>
            <div id="reservationContent" style="display: none;">
              <table class="table table-bordered">
                <thead>
                  <tr>
                    <th>Nom</th>
                    <th>Date D√©but</th>
                    <th>Date Fin</th>
                    <th>Espace</th>
                    <th>Organisateur</th>
                    <th>Prix</th>
                  </tr>
                </thead>
                <tbody id="reservationTableBody"></tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="row properties-box" id="espaceGrid">
      {% for espace in espaces %}
        <div class="col-lg-4 col-md-6 align-self-center mb-30 properties-items espace-card">
          <div class="item position-relative shadow-sm">
            <a href="{{ path('app_espace_show', {'idEspace': espace.idEspace}) }}">
              <img src="{{ asset('uploads/' ~ (espace.image is not empty ? espace.image : 'exemple.jpg')) }}" class="card-img-top" alt="{{ espace.nomEspace }}">
            </a>
            <span class="category">{{ espace.TypeEspace }}</span>
            <h6>{{ espace.prix }} Dt</h6>
            <h4><a href="{{ path('app_espace_show', {'idEspace': espace.idEspace}) }}">{{ espace.nomEspace }}</a></h4>
            <ul>
              <li>Adresse : <span>{{ espace.adresse }}</span></li>
              <li>Capacit√© : <span>{{ espace.capacite }}</span></li>
              <li>Disponibilit√© : <span class="badge {{ espace.disponibilite == 'Disponible' ? 'bg-success' : 'bg-danger' }}">{{ espace.disponibilite }}</span></li>
            </ul>
            <div class="main-button d-flex flex-column gap-2 align-items-center mt-2">
              <a href="{{ path('app_espace_show', {'idEspace': espace.idEspace}) }}" class="btn btn-outline-primary w-75">üîç D√©tails</a>
              {% if espace.disponibilite == 'Disponible' %}
                <button class="btn btn-outline-success w-75" data-bs-toggle="modal" data-bs-target="#reservationModal{{ espace.idEspace }}">üìÖ R√©server</button>
              {% else %}
                <button class="btn btn-outline-secondary w-75" disabled>‚õî Indisponible</button>
              {% endif %}
            </div>
          </div>
        </div>
      {% else %}
        <div class="col-12 text-center">
          <div class="alert alert-warning">Aucun espace trouv√©.</div>
        </div>
      {% endfor %}
    </div>
  </div>
</div>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

<script>
document.addEventListener("DOMContentLoaded", function () {
  const today = new Date();
  const minStartDate = new Date(today.setDate(today.getDate() + 7)).toISOString().split('T')[0];

  document.querySelectorAll('.reservation-form').forEach(form => {
    const dateDebutInput = form.querySelector('input[name="date_debut"]');
    const dateFinInput = form.querySelector('input[name="date_fin"]');

    if (dateDebutInput) dateDebutInput.min = minStartDate;

    dateDebutInput?.addEventListener('change', () => {
      const start = new Date(dateDebutInput.value);
      const minEnd = new Date(start); // autorise un seul jour
      dateFinInput.min = minEnd.toISOString().split('T')[0];
    });

    form.addEventListener('submit', async function (e) {
      e.preventDefault();

      const dateDebut = new Date(dateDebutInput.value);
      const dateFin = new Date(dateFinInput.value);

      if (dateDebut < new Date(minStartDate)) {
        alert("‚ùå La r√©servation ne peut commencer qu‚Äô√† partir de 7 jours apr√®s aujourd‚Äôhui.");
        return;
      }

      if (dateFin < dateDebut) {
        alert("‚ùå La date de fin ne peut pas √™tre avant la date de d√©but.");
        return;
      }

      const formData = new FormData(this);
      const payload = {
        nom_complet: formData.get('nom_complet')?.trim(),
        date_debut: formData.get('date_debut'),
        date_fin: formData.get('date_fin'),
        id_espace: this.dataset.espaceId,
        id_organisateur: formData.get('id_organisateur') || ''
      };

      try {
        const response = await fetch("{{ path('api_reserver_sheetbest') }}", {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(payload)
        });

        const result = await response.json();

        if (result.success) {
          alert("‚úÖ R√©servation enregistr√©e !");
          const closeBtn = this.closest('.modal').querySelector('.btn-close');
          closeBtn?.click();
        } else {
          alert("‚ùå Erreur : " + (result.error || "Erreur inconnue."));
        }
      } catch (error) {
        alert("‚ùå Erreur technique : " + error.message);
        console.error(error);
      }
    });
  });
});
</script>

<script>
document.addEventListener("DOMContentLoaded", function () {
  const modal = document.getElementById('reservationListModal');
  const loader = document.getElementById('reservationLoader');
  const content = document.getElementById('reservationContent');
  const tbody = document.getElementById('reservationTableBody');

  modal.addEventListener('show.bs.modal', async () => {
    loader.style.display = 'block';
    content.style.display = 'none';
    tbody.innerHTML = '';

    try {
      const response = await fetch("{{ path('app_reservations_liste') }}");
      const data = await response.json();

      if (Array.isArray(data)) {
        data.forEach(res => {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td>${res.nom_complet ?? '-'}</td>
            <td>${formatDate(res.date_debut)}</td>
            <td>${formatDate(res.date_fin)}</td>
            <td>${res.id_espace ?? '-'}</td>
            <td>${res.id_organisateur || '‚Äî'}</td>
            <td>${res.prix ?? '0'} Dt</td>
          `;
          tbody.appendChild(row);
        });

        loader.style.display = 'none';
        content.style.display = 'block';
      } else {
        loader.innerHTML = '‚ùå Format de donn√©es invalide.';
      }
    } catch (e) {
      loader.innerHTML = '‚ùå Erreur lors du chargement des donn√©es.';
      console.error(e);
    }
  });

  function formatDate(excelDate) {
    if (!excelDate || isNaN(excelDate)) return '-';
    const baseDate = new Date(Date.UTC(1899, 11, 30));
    baseDate.setDate(baseDate.getDate() + parseInt(excelDate));
    return baseDate.toISOString().split('T')[0];
  }
});
</script>

<script>
document.addEventListener("DOMContentLoaded", function () {
  const searchInput = document.getElementById('searchEspace');
  const espaceCards = document.querySelectorAll('#espaceGrid .espace-card');

  searchInput.addEventListener('input', function () {
    const query = this.value.trim().toLowerCase();
    espaceCards.forEach(card => {
      const title = card.querySelector('h4 a')?.textContent.toLowerCase() || '';
      const match = title.includes(query);
      if (!card.id.includes("ajouterEspaceCard")) {
        card.style.display = match ? 'block' : 'none';
      }
    });
  });
});
</script>

<script>
document.addEventListener("DOMContentLoaded", function () {
  document.querySelectorAll('.reservation-form').forEach(form => {
    const espaceId = form.dataset.espaceId;
    const modal = form.closest('.modal');

    modal.addEventListener('show.bs.modal', async () => {
      try {
        const response = await fetch('https://api.sheetbest.com/sheets/4d538bcb-a52a-4dde-84e4-ddb7c9520d8e');
        const reservations = await response.json();
        const disableDates = [];

        reservations.forEach(res => {
          if (res.id_espace === espaceId) {
            const startDate = new Date(res.date_debut);
            const endDate = new Date(res.date_fin);

            let current = new Date(startDate);
            while (current <= endDate) {
              disableDates.push(current.toISOString().split('T')[0]);
              current.setDate(current.getDate() + 1);
            }
          }
        });

        flatpickr(form.querySelector('.date-debut'), {
          minDate: new Date(new Date().setDate(new Date().getDate() + 7)),
          disable: disableDates,
          dateFormat: "Y-m-d"
        });

        flatpickr(form.querySelector('.date-fin'), {
          minDate: new Date(new Date().setDate(new Date().getDate() + 7)), // m√™me min que d√©but
          disable: disableDates,
          dateFormat: "Y-m-d"
        });

      } catch (err) {
        console.error("‚ùå Erreur lors de la r√©cup√©ration des r√©servations :", err);
      }
    });
  });
});
</script>
{% endblock %}
