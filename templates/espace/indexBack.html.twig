{% extends 'baseBack.html.twig' %}

{% block title %}Espaces{% endblock %}

{% block body %}
<div class="app-main__outer">
  <div class="app-main__inner">
  
    <!-- Titre -->
    <div class="app-page-title">
      <div class="page-title-wrapper">
        <div class="page-title-heading">
          <div class="page-title-icon">
            <i class="pe-7s-home icon-gradient bg-happy-itmeo"></i>
          </div>
          <div>Gestion des Espaces
            <div class="page-title-subheading">Liste des espaces disponibles et leurs d√©tails.</div>
          </div>
        </div>
        <div class="page-title-actions">
          <a href="{{ path('dashboard_espace_new') }}" class="btn btn-success">
            <i class="pe-7s-plus mr-2"></i> Nouvel Espace
          </a>
        </div>
      </div>
    </div>
<!-- üî• New Statistics Cards -->
<div class="row mb-4">
  <div class="col-md-4">
    <div class="card mb-3 widget-content bg-midnight-bloom">
      <div class="widget-content-wrapper text-white">
        <div class="widget-content-left">
          <div class="widget-heading">Total Espaces</div>
          <div class="widget-subheading">Nombre total d'espaces</div>
        </div>
        <div class="widget-content-right">
          <div class="widget-numbers text-white"><span>{{ totalEspaces }}</span></div>
        </div>
      </div>
    </div>
  </div>

  <div class="col-md-4">
    <div class="card mb-3 widget-content bg-arielle-smile">
      <div class="widget-content-wrapper text-white">
        <div class="widget-content-left">
          <div class="widget-heading">Espaces avec Organisateur</div>
          <div class="widget-subheading">Espaces reli√©s √† un organisateur</div>
        </div>
        <div class="widget-content-right">
          <div class="widget-numbers text-white"><span>{{ espacesAvecOrganisateur }}</span></div>
        </div>
      </div>
    </div>
  </div>

  <div class="col-md-4">
    <div class="card mb-3 widget-content bg-grow-early">
      <div class="widget-content-wrapper text-white">
        <div class="widget-content-left">
          <div class="widget-heading">Espaces sans Organisateur</div>
          <div class="widget-subheading">Espaces sans aucun organisateur</div>
        </div>
        <div class="widget-content-right">
          <div class="widget-numbers text-white"><span>{{ espacesSansOrganisateur }}</span></div>
        </div>
      </div>
    </div>
  </div>
</div>
<!-- üî• End New Statistics -->

    <!-- Filtres -->
    <div class="row mb-4">
      <div class="col-md-4">
        <input type="text" id="searchEspace" class="form-control" placeholder="üîç Rechercher un espace...">
      </div>
      <div class="col-md-4">
        <select id="filterType" class="form-control">
          <option value="">-- Tous les types --</option>
          <option value="culturel">Culturel</option>
          <option value="familial">Familial</option>
          <option value="autre">Autre</option>
        </select>
      </div>
      <div class="col-md-4">
        <select id="sortPrice" class="form-control">
          <option value="">-- Tri par prix --</option>
          <option value="asc">Prix croissant</option>
          <option value="desc">Prix d√©croissant</option>
        </select>
      </div>
    </div>

    <!-- Liste des cartes -->
    <div class="row" id="espaceCards">
      {% for espace in espaces %}
        <div class="col-md-6 col-xl-4 espace-card" 
             data-nom="{{ espace.nomEspace|lower }}"
             data-type="{{ espace.Type_espace|lower }}"
             data-prix="{{ espace.prix }}">
          <div class="card mb-4 shadow-sm">
            <div class="position-relative">
              <img 
                src="{{ asset('uploads/' ~ (espace.image is not empty ? espace.image : 'placeholder.jpg')) }}" 
                class="card-img-top" 
                alt="{{ espace.nomEspace }}"
              >
              {% if espace.image is empty %}
                <span class="badge badge-secondary position-absolute"
                      style="top: 10px; left: 10px; background-color: rgba(0,0,0,0.7); font-size: 0.75rem;">
                  Placeholder
                </span>
              {% endif %}
            </div>

            <div class="card-body">
              <h5 class="card-title text-uppercase">{{ espace.nomEspace }}</h5>
              <p class="card-text text-muted mb-1">
                üìç <strong>Adresse :</strong> {{ espace.adresse }}<br>
                üë• <strong>Capacit√© :</strong> {{ espace.capacite }}<br>
                üè∑Ô∏è <strong>Type :</strong> {{ espace.Type_espace }}
              </p>
              <p class="card-text">
                <strong>Disponibilit√© :</strong> {{ espace.disponibilite }}
              </p>
              <div class="d-flex justify-content-between align-items-center">
                <span class="badge badge-info p-2">{{ espace.prix }} DT</span>
                <a href="{{ path('dashboard_espace_show', {'idEspace': espace.idEspace}) }}" class="btn btn-sm btn-outline-primary">
                  Voir d√©tails
                </a>
              </div>
            </div>
          </div>
        </div>
      {% else %}
        <div class="col-12">
          <div class="alert alert-warning text-center">Aucun espace trouv√©.</div>
        </div>
      {% endfor %}
    </div>
  </div>
</div>

<script>
  const searchInput = document.getElementById('searchEspace');
  const filterType = document.getElementById('filterType');
  const sortPrice = document.getElementById('sortPrice');
  const cardsContainer = document.getElementById('espaceCards');

  function filterAndSortCards() {
    const query = searchInput.value.toLowerCase();
    const type = filterType.value.toLowerCase();
    const sortOrder = sortPrice.value;

    let cards = Array.from(cardsContainer.querySelectorAll('.espace-card'));

    // Filtrage
    cards.forEach(card => {
      const name = card.dataset.nom;
      const cardType = card.dataset.type;

      const matchSearch = name.includes(query);
      const matchType = !type || cardType === type;

      card.style.display = (matchSearch && matchType) ? '' : 'none';
    });

    // Tri
    cards = cards.filter(card => card.style.display !== 'none');

    if (sortOrder) {
      cards.sort((a, b) => {
        const priceA = parseFloat(a.dataset.prix);
        const priceB = parseFloat(b.dataset.prix);
        return sortOrder === 'asc' ? priceA - priceB : priceB - priceA;
      });

      // R√©injection dans le DOM
      cards.forEach(card => cardsContainer.appendChild(card));
    }
  }

  searchInput.addEventListener('input', filterAndSortCards);
  filterType.addEventListener('change', filterAndSortCards);
  sortPrice.addEventListener('change', filterAndSortCards);
</script>
{% endblock %}
